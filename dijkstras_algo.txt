#include <iostream>
#include <vector>
#include <set>
#include <climits>

using namespace std;

// Structure to represent an edge and its weight
struct Edge {
    int destination;
    int weight;

    Edge(int dest, int w) : destination(dest), weight(w) {}
};

class Graph {
private:
    int vertices;
    vector<vector<Edge>> adjacencyList;

public:
    Graph(int v) : vertices(v), adjacencyList(v) {}

    // Add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        adjacencyList[src].emplace_back(dest, weight);
        adjacencyList[dest].emplace_back(src, weight); // For undirected graph
    }

    // Dijkstra's algorithm to find the shortest paths
    void dijkstra(int start) {
        set<pair<int, int>> pq; // Priority queue to store vertices and their distances
        vector<int> distance(vertices, INT_MAX);  //This part of the line is a constructor call for the vector<int> class.
//The constructor is being used to initialize the vector with a specified size (vertices) and a default value (INT_MAX).

        // Initialize distance for the start vertex
        distance[start] = 0;
        pq.insert({0, start});

        while (!pq.empty()) {
            int u = pq.begin()->second;   
            pq.erase(pq.begin());

            // Explore neighbors of the current vertex
            for (const Edge& edge : adjacencyList[u]) {
                int v = edge.destination;
                int weight = edge.weight;

                // Relaxation step
                if (distance[u] + weight < distance[v]) {
                    pq.erase({distance[v], v});
                    distance[v] = distance[u] + weight;
                    pq.insert({distance[v], v});
                }
            }
        }

        // Display the shortest distances
        cout << "Shortest Distances from vertex " << start << ":\n";
        for (int i = 0; i < vertices; ++i) {
            cout << "Vertex " << i << ": ";
            if (distance[i] == INT_MAX)
                cout << "INF";
            else
                cout << distance[i];
            cout << "\n";
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges with weights
      // src  desination weight
    g.addEdge(0, 1, 5);
    g.addEdge(0, 2, 8);
    g.addEdge(1, 2, 9);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 6);


    // Find and display the shortest paths from vertex 0
    g.dijkstra(0);

    return 0;
}
