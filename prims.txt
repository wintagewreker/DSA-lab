#include <iostream>
#include <vector>
#include <climits>

using namespace std;

struct Edge {
    int dest;
    int weight;
};

int minKey(const vector<int>& key, const vector<bool>& mst, int vertices) {
    int minKey = INT_MAX;
    int minIndex;

    for (int v = 0; v < vertices; ++v) {
        if (!mst[v] && key[v] < minKey) {
            minKey = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}

void printMST(const vector<int>& parent, const vector<vector<Edge>>& graph, int vertices) {
    cout << "Minimum Spanning Tree:\n";
    
    int totalCost = 0;

    for (int i = 1; i < vertices; ++i) {
        cout << "Edge: " << parent[i] << " - " << i << "   Weight: " << graph[i][parent[i]].weight << "\n";
        totalCost += graph[i][parent[i]].weight;
    }

    cout << "Total Cost of MST: " << totalCost << "\n";
}

void primMST(const vector<vector<Edge>>& graph, int vertices) {
    vector<int> key(vertices, INT_MAX);
    vector<bool> mst(vertices, false);
    vector<int> parent(vertices, -1);

    key[0] = 0;

    for (int count = 0; count < vertices - 1; ++count) {
        int u = minKey(key, mst, vertices);
        mst[u] = true;

        for (const Edge& edge : graph[u]) {
            int v = edge.dest;
            int weight = edge.weight;
            if (!mst[v] && weight < key[v]) {
                parent[v] = u;
                key[v] = weight;
            }
        }
    }

    printMST(parent, graph, vertices);
}

int main() {
    int vertices = 5;
    vector<vector<Edge>> graph(vertices);

    graph[0].push_back({1, 2});
    graph[0].push_back({3, 6});
    graph[1].push_back({0, 2});
    graph[1].push_back({2, 3});
    graph[1].push_back({3, 8});
    graph[1].push_back({4, 5});
    graph[2].push_back({1, 3});
    graph[2].push_back({4, 7});
    graph[3].push_back({0, 6});
    graph[3].push_back({1, 8});
    graph[4].push_back({1, 5});
    graph[4].push_back({2, 7});

    primMST(graph, vertices);

    return 0;
}
