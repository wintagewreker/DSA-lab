#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;

    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
};

class Graph {
public:
    vector<Edge> edges;
    int vertices;

    Graph(int v) : vertices(v) {}

    void addEdge(int src, int dest, int weight) {
        edges.emplace_back(src, dest, weight);
    }

    int findParent(int parent[], int i) {
        if (parent[i] == -1)
            return i;
        return findParent(parent, parent[i]);
    }

    void unionSets(int parent[], int x, int y) {
        int xset = findParent(parent, x);
        int yset = findParent(parent, y);
        parent[xset] = yset;
    }

    void kruskalMST() {
        vector<Edge> result;
        int* parent = new int[vertices];
        fill(parent, parent + vertices, -1);

        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        for (const Edge& edge : edges) {
            int x = findParent(parent, edge.src);
            int y = findParent(parent, edge.dest);

            if (x != y) {
                result.push_back(edge);
                unionSets(parent, x, y);
            }
        }

        cout << "Edges in Minimum Spanning Tree:\n";
        int totalCost = 0;
        for (const Edge& edge : result) {
            cout << edge.src << " - " << edge.dest << "   Weight: " << edge.weight << endl;
            totalCost += edge.weight;
        }

        cout << "Total Cost of MST: " << totalCost << endl;
    }
};

int main() {
    Graph g(6);

    g.addEdge(0, 1, 4);
    g.addEdge(0, 2, 3);
    g.addEdge(1, 2, 2);
    g.addEdge(1, 3, 1);
    g.addEdge(2, 3, 5);
    g.addEdge(2, 4, 4);
    g.addEdge(3, 4, 7);

    g.kruskalMST();

    return 0;
}
